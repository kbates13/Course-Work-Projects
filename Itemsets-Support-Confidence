{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Assignment 3 - Part A\n",
    "## Frequent Itemsets, Support, and Confidence\n",
    "\n",
    "When uploading the notebook to canvas, add your UNCC ID to the end of the filename  \n",
    "Ex: assignment3_partA_jmelto30.ipynb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. Read in the *cart_sample.txt* file."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "with open('cart_sample.csv') as f:\n",
    "    text = [line.strip().split(',') for line in f.readlines()]\n",
    "text"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "2. Use the *Counter* class to calculate the support for each item.  \n",
    "    Hint: use the set() function to avoid double counting items"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from collections import Counter\n",
    "newText = []\n",
    "for i in text:\n",
    "    \n",
    "    for a in set(i):\n",
    "        newText.append(a)\n",
    "        \n",
    "count = Counter(newText)        \n",
    "count"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "3. Generate the frequent items for a support threshold of 50."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "for x in count:\n",
    "    if count[x] > 50:\n",
    "        print(x)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "4. Given five frequent item pairs with their support, calculate the confidence of each rule.  \n",
    "    Hint: Remember that each pair has two rules {A} --> {B} and {B} --> {A}\n",
    "   \n",
    "| Item 1 | Item 2 | Support |\n",
    "|-|-|-|\n",
    "| tea | tortillas | 74 |\n",
    "| individual meals | chocolates | 176 |\n",
    "| chicken | ketchup | 55 |\n",
    "| tomatoes | chocolates | 71 |\n",
    "| potatoes | sandwich bags | 91 |"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "pycharm": {
     "name": "#%%\n"
    }
   },
   "outputs": [],
   "source": [
    "def confidence(item1, item2, support, wordCount):\n",
    "    return ((support)/wordCount[item1])\n",
    "\n",
    "txt = 'Tea--->Tortillas: {}'\n",
    "print(txt.format(confidence('tea','tortillas',74,count)))\n",
    "\n",
    "txt = 'Tortillas--->Tea: {}'\n",
    "print(txt.format(confidence('tortillas','tea',74,count)))\n",
    "\n",
    "txt = 'Individuals Meals--->Chocolates: {}'\n",
    "print(txt.format(confidence('individual meals','chocolates',176,count)))\n",
    "\n",
    "txt = 'Chocolates--->Individual Meals: {}'\n",
    "print(txt.format(confidence('chocolates','individual meals',176,count)))\n",
    "\n",
    "txt = 'Chicken--->Ketchup: {}'\n",
    "print(txt.format(confidence('chicken','ketchup',55,count)))\n",
    "\n",
    "txt = 'Ketchup--->Chicken: {}'\n",
    "print(txt.format(confidence('ketchup','chicken',55,count)))\n",
    "\n",
    "txt = 'Tomatoes--->Chocolates: {}'\n",
    "print(txt.format(confidence('tomatoes','chocolates',71,count)))\n",
    "\n",
    "txt = 'Chocolates--->Tomatoes: {}'\n",
    "print(txt.format(confidence('chocolates','tomatoes',71,count)))\n",
    "\n",
    "txt = 'Potatoes--->Sandwich Bags: {}'\n",
    "print(txt.format(confidence('potatoes','sandwich bags',91,count)))\n",
    "\n",
    "txt = 'Sandwich Bags--->Potatoes: {}'\n",
    "print(txt.format(confidence('potatoes','sandwich bags',91,count)))\n",
    "    "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "5. Given a confidence threshold of 0.3, print the rules that pass our threshold."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "def rulePass(item1, item2, support, wordCount):\n",
    "    if confidence(item1,item2,support,wordCount) >= .3:\n",
    "        txt = '{}--->{}: Passed'\n",
    "        print(txt.format(item1,item2))\n",
    "        \n",
    "rulePass('tea','tortillas',74,count)  \n",
    "rulePass('tortillas','tea',74,count)\n",
    "rulePass('individual meals','chocolates',176,count)\n",
    "rulePass('chocolates','individual meals',176,count)\n",
    "rulePass('chicken','ketchup',55,count)\n",
    "rulePass('ketchup','chicken',55,count)\n",
    "rulePass('tomatoes','chocolates',71,count)\n",
    "rulePass('chocolates','tomatoes',71,count)\n",
    "rulePass('potatoes','sandwich bags',91,count)\n",
    "rulePass('potatoes','sandwich bags',91,count)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  },
  "pycharm": {
   "stem_cell": {
    "cell_type": "raw",
    "metadata": {
     "collapsed": false
    },
    "source": []
   }
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
