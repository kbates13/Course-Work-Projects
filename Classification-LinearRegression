{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Before submitting the assignment, add your UNCC username to the end of the file name.<br>Ex: ITCS3162_final_hw_jmelto30.ipynb"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "collapsed": true
   },
   "source": [
    "# Part 1: Classification\n",
    "\n",
    "For this assignment, you will fit classification models to predict the political party of U.S. Representatives using past voting records.  \n",
    "\n",
    "The dataset for this analysis is *voting_data.csv*.\n",
    "\n",
    "The **Class Name** column contains the political party for each representative, which will be our label column for this analysis.  \n",
    "The remaining columns will form our feature set."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read in the data\n",
    "\n",
    "In the code cell below, read the voting data into a pandas dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "\n",
    "file = pd.read_csv('voting_data.csv', header=0)\n",
    "\n",
    "file.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Clean up the data\n",
    "\n",
    "Encode features as numeric values:\n",
    "- Replace 'y' votes with 1\n",
    "- Replace 'n' votes with 0\n",
    "- Replace '?' votes with NaN (use np.nan)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np\n",
    "\n",
    "file.replace({'y':1, 'n':0, '?':np.nan}, inplace = True)\n",
    "\n",
    "file.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Encode labels as numeric values:\n",
    "- Replace 'republican' with 1\n",
    "- Replace 'democrat' with 0"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "file['Class Name'].replace({'republican':1, 'democrat':0}, inplace=True)\n",
    "file.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Handling missing values\n",
    "\n",
    "Replace the missing values with a third category (use 2)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "file.replace({np.nan: 2}, inplace=True)\n",
    "file.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question:** What do missing values in this dataset represent? Why does retaining the missing values as a third category make sense for this data?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The missing values in the dataset represents unknown votes for certain people in a category. Retaining the missing make sense because by keeping them it represents that nothing can be assumed about the missing vote. If we did not keep the missing valuses the data would be miss represented."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split the data into feature and label sets\n",
    "\n",
    "Create feature and label sets of data with the appropriate columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x = file.drop(['Class Name'], axis = 1)\n",
    "y = file['Class Name']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Divide features and labels into training and test sets\n",
    "\n",
    "Split the features and labels into training and test datasets.  \n",
    "Use 20% of the data as a test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "x_train, x_test, y_train, y_test = train_test_split(x, y, test_size=0.2, random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit Decision Tree classifier\n",
    "\n",
    "Initialize and fit a Decision Tree classifier on your training dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.tree import DecisionTreeClassifier\n",
    "\n",
    "tree = DecisionTreeClassifier()\n",
    "\n",
    "tree = tree.fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluate Decision Tree classifier\n",
    "\n",
    "Use cross validation on your entire dataset (see [cross validate](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_validate.html) or [cross val score](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html) documentation) to report the mean F1, precision, and recall scores across all folds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {
    "scrolled": true
   },
   "outputs": [],
   "source": [
    "from sklearn.model_selection import cross_val_score\n",
    "\n",
    "s = cross_val_score(tree, x, y, cv=5, scoring='f1_micro')\n",
    "\n",
    "\n",
    "\n",
    "precision = cross_val_score(tree, x, y, cv=5, scoring = 'precision')\n",
    "recall = cross_val_score(tree, x, y, cv=5, scoring = 'recall')\n",
    "print('Mean: %0.2f' %s.mean())\n",
    "print('Presicion: {}'.format(precision))\n",
    "print('Recall: {}'.format(recall))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit Naive Bayes classifier\n",
    "\n",
    "**Question:** Look at scikit learn's documentation for [Naive Bayes](https://scikit-learn.org/stable/modules/naive_bayes.html) and the lecture slides for Naive Bayes. Given the data type of our feature columns, which type of Naive Bayes classifier is appropriate for our dataset?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Categorical Naive Bayes Classifier"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Initialize and fit a Naive Bayes classifier on your training dataset. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.naive_bayes import CategoricalNB\n",
    "\n",
    "cnb = CategoricalNB().fit(x_train, y_train)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluate Naive Bayes classifier\n",
    "\n",
    "Use cross validation on your entire dataset (see [cross validate](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_validate.html) or [cross val score](https://scikit-learn.org/stable/modules/generated/sklearn.model_selection.cross_val_score.html) documentation) to report the mean F1, precision, and recall scores across all folds."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "s = cross_val_score(cnb, x, y, cv=5, scoring='f1_micro')\n",
    "\n",
    "\n",
    "\n",
    "precision = cross_val_score(cnb, x, y, cv=5, scoring = 'precision')\n",
    "recall = cross_val_score(cnb, x, y, cv=5, scoring = 'recall')\n",
    "print('Mean: %0.2f' %s.mean())\n",
    "print('Presicion: {}'.format(precision))\n",
    "print('Recall: {}'.format(recall))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question:** Which classifier model performed better on the voting dataset? Why do you think this is?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The decision tree classifier worked better for the model. I think this is the case because the data provides a simple decision for the classifier. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## *Bonus*\n",
    "\n",
    "Predict the class label using your test dataset with both models.\n",
    "\n",
    "Report the classification report and accuracy for your model. See [classification report](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.classification_report.html) and [accuracy score](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.accuracy_score.html)."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question:** Which classifier model performed better on the test dataset?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": []
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "***\n",
    "\n",
    "# Part 2: Regression\n",
    "\n",
    "For this assignment, you will fit regression models to predict the daily count of bike riders.\n",
    "\n",
    "The dataset for this analysis is *day_clean.csv*.\n",
    "\n",
    "The **cnt** column contains the total count of bike riders on a given day, which will be our label column for this analysis."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Read in the data\n",
    "\n",
    "In the code cell below, read the daily bike data into a pandas dataframe."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "clean = pd.read_csv('day_clean.csv', header=0)\n",
    "clean.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Individual feature selection\n",
    "\n",
    "Choose three columns from the dataset that you think will be the best predictors of bike ridership count.  \n",
    "Look at the *Readme.txt* for more information about the dataset.\n",
    "\n",
    "**Question:** Justify why you selected these three columns."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Season: The season is important because people are usually more active during the seasons with warmer conditions.\n",
    "Weathersit: Weathersit is important because people tend to choose thier activities based on the weather.\n",
    "Temp: Temperature is a big factor because people perform outside activities when they are confortable with the temperature."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Split the data into feature and label sets\n",
    "\n",
    "Create a labels dataset.  \n",
    "Create your three single feature sets using each of the three columns you have selected."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sfeature = clean['season'].values.reshape(-1,1)\n",
    "wfeature = clean['weathersit'].values.reshape(-1,1)\n",
    "tfeature = clean['temp'].values.reshape(-1,1)\n",
    "\n",
    "y1 = clean['cnt']"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## For each single feature set, divide the features and labels into training and test sets\n",
    "\n",
    "Split the feature and label sets into training and test sets.  \n",
    "Use 20% of the data as a test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train1, x_test1, y_train1, y_test1 = train_test_split(sfeature, y1, test_size=0.2, random_state=1)\n",
    "x_train2, x_test2, y_train2, y_test2 = train_test_split(wfeature, y1, test_size=0.2, random_state=1)\n",
    "x_train3, x_test3, y_train3, y_test3 = train_test_split(tfeature, y1, test_size=0.2, random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit simple Linear Regression models\n",
    "\n",
    "For each of your single feature sets, initialize and fit a Linear Regression model on your training dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "from sklearn.linear_model import LinearRegression\n",
    "\n",
    "sweight = LinearRegression().fit(x_train1, y_train1)\n",
    "wweight = LinearRegression().fit(x_train2, y_train2)\n",
    "tweight = LinearRegression().fit(x_train3, y_train3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evaluate simple Linear Regression models\n",
    "\n",
    "For each model, predict the ridership count using your test dataset.  \n",
    "Report the mean squared error for each model on the test dataset. See [mean squared error](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_squared_error.html) documentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "s_predict = sweight.predict(x_test1)\n",
    "w_predict = wweight.predict(x_test2)\n",
    "t_predict = tweight.predict(x_test3)\n",
    "\n",
    "from sklearn.metrics import mean_squared_error\n",
    "\n",
    "s_score = mean_squared_error(y_test1, s_predict)\n",
    "w_score = mean_squared_error(y_test2, w_predict)\n",
    "t_score = mean_squared_error(y_test3, t_predict)\n",
    "\n",
    "print('Season Score: {}'.format(s_score))\n",
    "print('Weathersit Score: {}'.format(w_score))\n",
    "print('Temp Score: {}'.format(t_score))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Simple Linear Regression scatterplot\n",
    "\n",
    "Using the best predictive feature from your simple Linear Regression models, plot a scatterplot of that feature vs. the ridership count.  \n",
    "\n",
    "***Bonus:*** Include the best-fit line from your model in your scatterplot."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "\n",
    "plt.figure(figsize=(10,5))\n",
    "plt.xlabel('Temp')\n",
    "plt.ylabel('CNT')\n",
    "plt.scatter(x_test3, y_test3, color='black')\n",
    "plt.plot(x_test3, t_predict, color='blue', linewidth = 3)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Multiple Linear Regression\n",
    "\n",
    "Create a feature set using all predictor columns."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "features = clean.drop(['yr', 'mnth', 'holiday', 'weekday', 'workingday', 'atemp', 'hum', 'windspeed', 'cnt'], axis=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Divide the feature set and labels into training and test sets\n",
    "\n",
    "Split the features and labels into training and test datasets.  \n",
    "Use 20% of the data as a test set."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "x_train4, x_test4, y_train4, y_test4 = train_test_split(features, y1, test_size=0.2, random_state=1)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Fit multiple Linear Regression model\n",
    "\n",
    "Initialize and fit a Linear Regression model on your training dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "fweight = LinearRegression().fit(x_train4, y_train4)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Evalute multiple Linear Regression model\n",
    "\n",
    "Predict the ridership count using your test dataset.  \n",
    "Report the mean squared error of your model on the test dataset. See [mean squared error](https://scikit-learn.org/stable/modules/generated/sklearn.metrics.mean_squared_error.html) documentation."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "f_predict = fweight.predict(x_test4)\n",
    "\n",
    "f_score = mean_squared_error(y_test4, f_predict)\n",
    "\n",
    "print('Features Score: {}'.format(f_score))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "**Question:** Which of your models performed best overall?"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The multiple linear regression model performed the best of the data. "
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
